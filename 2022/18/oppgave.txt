Nissesikker data - Produksjonssetting

Av Aksel Ladegård

    Dette er del 2 av oppgaven fra Luke 11. Gjør den først før du gjør denne.

Introduksjon

Sikre på at Nisse-safe fungerer bra, bestemmer nissens hjelpere seg for å sette systemet i produksjon. De har imidlertid funnet ut at ved å bruke større datablokker i algoritmen sin, kaster de bort færre bits på verifisering og korrigering av data, slik at lange addresser ikke tar så mye plass.

Julaften kommer, og nissen er på vei til en VIP (Very Important Present-receiver). Adressen er korrupt, men takket være Nisse-safe algoritmen kan addressen reproduseres perfekt, og gavene kommer fram!
Nisse-safe v2.0

    Se forrige luke for generell info om Nisse-safe

Siden Nisse-safe deler data i blokker på størrelse 2n, og bare setter av n+1 bits til verifisering og korrigering, har nissens hjelpere bestemt seg for å øke blokkstørrelsen til 32 bit (n=5).

Algoritmen er den samme:

    Bit med index 0 rendundant og kan sees bort i fra
    Bits med index som er toerpotens (1, 2, 4, 8, 16) er parity bits.
    Resterende bits er data.
    Hver parity bit settes til 1 dersom tallene i sin gruppe summeres til et oddetall, 0 dersom det blir partall.
    Gruppene deles inn som følger:
        Start på parity bitten sin index.
        Plukk m indekser, hvor m er parity bitten sin index.
        Hopp over m indekser.
        Gjenta
        Eksempel: Parity bit 4: [ 4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31]

    Merknad: Nisse-safe fungerer bare så lenge det er 0 eller 1 bit flips per blokk. Er det mer enn dette er det ikke mulig å rette opp dataen. Heldigvis er det ikke så store feil i addressen i nissens addresseregister

Dekoding fungerer på akkurat samme måte som i Nisse-safe v1.0. Dersom det er en feil, vil en eller flere av gruppene summeres til oddetall. Indeksen som inneholder en bit flip er da indeksen som finnes i alle grupper med oddetall og ingen av gruppene med partall.
Tekst-enkoding

Mangel på finansiering har ført til at mange av nissens datasystemer er utdatert. Derfor har nissens hjelpere i v2.0 valgt et tekst-enkodingssystem som er så bakoverkompatibelt de kunne tenke seg, nemlig 7-bit ASCII, lagret i 8-bits bytes.

Teksten "OK" blir i systemet lagret som

0100111101001011

Eksempel

    Vi tegner ikke opp eksempelet som en kvadratisk tabell, siden dette ikke er mulig der n er et oddetall.

Dette er en datablokk med n=5 (32 bits) hvor en bit er flippet.

01100100010000110001110110100100

Sjekker vi parity bits ser man at bit 20 er flippet. Retter vi opp denne og trekker ut data får følgende bits:

01001000 01100101 01101001 00

Vi ser bort fra de to siste bitsene, som bare er padding. Tar vi 8 bits av gangen og konverterer til ASCII så får vi svaret:

Hei

Tips

Det finnes smarte og effektive måter å løse denne oppgaven generelt på, uavhengig av størrelsen på n. I tillegg kan lokaliseringen av en potensielt flippet bit løses med en enkel one-liner. Om du vil prøve deg, eksperimenter med å tegne opp noen eksempler hvor du skriver indekser som binærtall, og se om du finner noen interessante bit mønstre.

Den Nisse-safe enkodede adressen i nissens adresseregister er vedlagt i filen input.txt.

Siden nissen allerede hadde flydd i flere timer er det mange bit flips (men heldigvis ikke mer enn én per datablokk). Rett opp feilene og finn addressen til nissens VIP.

    Svar angis som en enkel tekststreng, uten anførselstegn, for eksempel "Julenissen, Julenissens hovedkvarter,
	Postboks 0001, NP"


